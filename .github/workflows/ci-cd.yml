name: LibriVault CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: librivault-backend
  FRONTEND_IMAGE: librivault-frontend

jobs:
  # Step 1: Test the code
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Test Backend
      run: |
        cd backend
        mvn clean compile -DskipTests
        echo "✅ Backend compilation successful"
        
    - name: Test Frontend
      run: |
        cd frontend
        npm ci
        npm run build --if-present
        echo "✅ Frontend build successful"

  # Step 2: Build and Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract Backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Extract Frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Image digest
      run: |
        echo "✅ Backend image pushed: ${{ steps.backend-meta.outputs.tags }}"
        echo "✅ Frontend image pushed: ${{ steps.frontend-meta.outputs.tags }}"

  # Step 3: Deploy to EC2
  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          echo "🚀 Starting deployment on EC2..."
          
          # Verify Docker is installed (should be pre-installed via user data script)
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker not found! Make sure EC2 instance was created with proper user data script"
            exit 1
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose not found! Make sure EC2 instance was created with proper user data script"
            exit 1
          fi
          
          echo "✅ Docker and Docker Compose are available"
          
          # Create application directory
          mkdir -p ~/librivault-app
          cd ~/librivault-app
          
          # Create environment file
          echo "📝 Creating environment configuration..."
          cat > .env << EOF
          # Database Configuration
          DB_HOST=database
          DB_PORT=3306
          DB_NAME=librivault_db
          DB_USERNAME=root
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # CORS Configuration
          CORS_ALLOWED_ORIGINS=http://${{ secrets.EC2_HOST }}:4200,http://localhost:4200
          
          # Docker Images
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/librivault-backend:latest
          FRONTEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/librivault-frontend:latest
          EOF
          
          # Create production docker-compose file
          echo "📝 Creating Docker Compose configuration..."
          cat > docker-compose.yml << 'EOF'
          services:
            # MySQL Database
            database:
              image: mysql:8.0
              container_name: librivault-db-prod
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
                MYSQL_DATABASE: ${DB_NAME}
              ports:
                - "3308:3306"
              volumes:
                - mysql_data_prod:/var/lib/mysql
              networks:
                - librivault-network
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 30s
          
            # Spring Boot Backend
            backend:
              image: ${BACKEND_IMAGE}
              container_name: librivault-backend-prod
              restart: unless-stopped
              depends_on:
                database:
                  condition: service_healthy
              environment:
                - SPRING_PROFILES_ACTIVE=production
                - DB_HOST=database
                - DB_PORT=3306
                - DB_NAME=${DB_NAME}
                - DB_USERNAME=${DB_USERNAME}
                - DB_PASSWORD=${DB_PASSWORD}
                - JWT_SECRET=${JWT_SECRET}
                - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
              ports:
                - "8080:8080"
              networks:
                - librivault-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
            # Angular Frontend
            frontend:
              image: ${FRONTEND_IMAGE}
              container_name: librivault-frontend-prod
              restart: unless-stopped
              depends_on:
                backend:
                  condition: service_healthy
              ports:
                - "4200:4200"
              networks:
                - librivault-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:4200"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
          
          volumes:
            mysql_data_prod:
              driver: local
          
          networks:
            librivault-network:
              driver: bridge
          EOF
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose down --remove-orphans || true
          
          # Pull latest images from Docker Hub
          echo "📥 Pulling latest Docker images..."
          docker-compose pull
          
          # Start the application
          echo "🚀 Starting LibriVault application..."
          docker-compose up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check service status
          echo "🔍 Checking service status..."
          docker-compose ps
          
          # Test application endpoints
          echo "🧪 Testing application endpoints..."
          
          # Test backend health
          if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
            echo "✅ Backend is healthy and responding"
          else
            echo "❌ Backend health check failed"
            docker-compose logs backend
          fi
          
          # Test frontend
          if curl -f http://localhost:4200 > /dev/null 2>&1; then
            echo "✅ Frontend is healthy and responding"
          else
            echo "❌ Frontend health check failed"
            docker-compose logs frontend
          fi
          
          # Clean up unused Docker images
          echo "🧹 Cleaning up unused Docker images..."
          docker image prune -f
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URLs:"
          echo "   Frontend: http://${{ secrets.EC2_HOST }}:4200"
          echo "   Backend API: http://${{ secrets.EC2_HOST }}:8080/api"
          echo "   Health Check: http://${{ secrets.EC2_HOST }}:8080/api/health"